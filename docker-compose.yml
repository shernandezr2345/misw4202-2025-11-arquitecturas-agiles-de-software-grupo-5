services:
  flask_app:
    build: .
    container_name: flask_api
    restart: always
    environment:
      FLASK_ENV: development
      DATABASE_URL: "postgresql://admin:secret123*@db:5432/scrum"
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
    ports:
      - "8080:8080"
    volumes:
      - ./componenteProducto:/app
    command: ["python", "app.py"]
    depends_on:
      - db
      - rabbitmq
    networks:
      - flask_network 



  consumer:
    build: ./rabbitmq
    container_name: rabbitmq_consumer
    restart: always
    environment:
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
    volumes:
      - ./rabbitmq:/app
    command: ["python", "consumidor.py"]
    depends_on:
      - rabbitmq
    networks:
      - flask_network

     
  db:
    image: postgres:15
    container_name: flask_db
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secret123*
      POSTGRES_DB: scrum
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - flask_network 
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "usser"]
      interval: 10s
      retries: 5
      start_period: 10s

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    ports:
      - "5672:5672"  # Para la cola de mensajes
      - "15672:15672"  # Para la interfaz web de RabbitMQ
    networks:
      - flask_network 

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - flask_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - flask_network

  zuul_gateway:
    build:
      context: ./zuul
    container_name: zuul_gateway
    restart: always
    ports:
      - "8088:8088"
    depends_on:
      - flask_app
    networks:
      - flask_network


volumes:
  postgres_data: {}
  grafana_data: {}

networks:
  flask_network:  
    driver: bridge
